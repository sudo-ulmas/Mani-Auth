// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "api.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface --java_outToken ()
+ (--java_outToken *)fromList:(NSArray<id> *)list;
+ (nullable --java_outToken *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface --java_outHostInfo ()
+ (--java_outHostInfo *)fromList:(NSArray<id> *)list;
+ (nullable --java_outHostInfo *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation --java_outToken
+ (instancetype)makeWithAccessToken:(nullable NSString *)accessToken
    refreshToken:(nullable NSString *)refreshToken {
  --java_outToken* pigeonResult = [[--java_outToken alloc] init];
  pigeonResult.accessToken = accessToken;
  pigeonResult.refreshToken = refreshToken;
  return pigeonResult;
}
+ (--java_outToken *)fromList:(NSArray<id> *)list {
  --java_outToken *pigeonResult = [[--java_outToken alloc] init];
  pigeonResult.accessToken = GetNullableObjectAtIndex(list, 0);
  pigeonResult.refreshToken = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable --java_outToken *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [--java_outToken fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.accessToken ?: [NSNull null],
    self.refreshToken ?: [NSNull null],
  ];
}
@end

@implementation --java_outHostInfo
+ (instancetype)makeWithAppName:(nullable NSString *)appName
    locale:(nullable NSString *)locale {
  --java_outHostInfo* pigeonResult = [[--java_outHostInfo alloc] init];
  pigeonResult.appName = appName;
  pigeonResult.locale = locale;
  return pigeonResult;
}
+ (--java_outHostInfo *)fromList:(NSArray<id> *)list {
  --java_outHostInfo *pigeonResult = [[--java_outHostInfo alloc] init];
  pigeonResult.appName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.locale = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable --java_outHostInfo *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [--java_outHostInfo fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.appName ?: [NSNull null],
    self.locale ?: [NSNull null],
  ];
}
@end

@interface --java_outApiPigeonCodecReader : FlutterStandardReader
@end
@implementation --java_outApiPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [--java_outToken fromList:[self readValue]];
    case 130: 
      return [--java_outHostInfo fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface --java_outApiPigeonCodecWriter : FlutterStandardWriter
@end
@implementation --java_outApiPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[--java_outToken class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[--java_outHostInfo class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface --java_outApiPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation --java_outApiPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[--java_outApiPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[--java_outApiPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *--java_outGetApiCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    --java_outApiPigeonCodecReaderWriter *readerWriter = [[--java_outApiPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
@interface --java_outManiAuthApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation --java_outManiAuthApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)sendHostInfoHostInfo:(--java_outHostInfo *)arg_hostInfo completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.mani_auth.ManiAuthApi.sendHostInfo", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:--java_outGetApiCodec()];
  [channel sendMessage:@[arg_hostInfo ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

void SetUp--java_outHostAppApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<--java_outHostAppApi> *api) {
  SetUp--java_outHostAppApiWithSuffix(binaryMessenger, api, @"");
}

void SetUp--java_outHostAppApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<--java_outHostAppApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.mani_auth.HostAppApi.cancel", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:--java_outGetApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cancelWithError:)], @"--java_outHostAppApi api (%@) doesn't respond to @selector(cancelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api cancelWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.mani_auth.HostAppApi.finishAuthWithToken", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:--java_outGetApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(finishAuthWithTokenToken:error:)], @"--java_outHostAppApi api (%@) doesn't respond to @selector(finishAuthWithTokenToken:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        --java_outToken *arg_token = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api finishAuthWithTokenToken:arg_token error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
